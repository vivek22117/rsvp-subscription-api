name: 'RSVP Subscriber Lambda Infra Pipeline'

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Subscriber Lambda'
        required: false
        default: 'initiate'
      action:
        required: false
        description: 'Create & Destroy'
        default: 'Create'
      env:
        required: true
        description: 'qa or test or prod'

env:
  tf_version: '1.5.7'
  tf_working_dir_app: './deployment/subscription-lambda/'
  aws_region: 'us-east-1'
  environment: ${{ github.event.inputs.env }}

jobs:
  terraform:
    name: 'RSVP-Subscriber-API-Deployment-Pipeline-${{ github.event.inputs.action }}'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Get the current branch name
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: extract_branch

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      #  Configure AWS Credentials using IAM Role
      - name: AWS IAM Assume Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Run aws cli to fetch Account Id
        id: aws_details
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo AWS_ACCOUNT=$ACCOUNT_ID >> $GITHUB_ENV
          CURRENT_REGION=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[0].[RegionName]' --output text)
          echo AWS_REGION=$CURRENT_REGION >> $GITHUB_ENV


      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init For Subscriber Lambda
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_working_dir: ${{ env.tf_working_dir_app }}
          tf_actions_subcommand: 'init'
          tf_actions_comment: false
          args: '-backend-config="config/${{ env.environment }}-backend-config.config" -backend-config="bucket=${{ env.environment }}-tfstate-${{ env.AWS_ACCOUNT }}-${{ env.AWS_REGION }}"'

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir_app }}
          tf_actions_comment: false

      - name: Terraform Plan Subscriber Lambda
        id: app-plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_working_dir: ${{ env.tf_working_dir_app }}
          tf_actions_comment: false
          tf_actions_subcommand: 'plan'
          args: '-var="environment=${{ env.environment }}" -var-file="${{ env.environment }}.tfvars"'

      - name: Terraform Apply For Subscriber Lambda
        if: steps.app-plan.outputs.tf_actions_plan_has_changes == 'true' && github.event.inputs.action == 'Create'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_working_dir: ${{ env.tf_working_dir_app }}
          tf_actions_subcommand: 'apply'
          tf_actions_comment: false
          args: '-auto-approve -var="environment=${{ env.environment }}" -var-file="${{ env.environment }}.tfvars"'


      - name: Terraform Destroy For Subscriber Lambda
        if: github.event.inputs.action == 'Destroy'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_working_dir: ${{ env.tf_working_dir_app }}
          tf_actions_subcommand: 'destroy'
          tf_actions_comment: false
          args: '-auto-approve -var="environment=${{ env.environment }}" -var-file="${{ env.environment }}.tfvars"'


